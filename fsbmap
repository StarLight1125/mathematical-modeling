static uint
bmap(struct inode *ip, uint bn)
{
  uint addr, *a, *b;
  struct buf *bp, *bnp;

  if(bn < NDIRECT){
    if((addr = ip->addrs[bn]) == 0)
      ip->addrs[bn] = addr = balloc(ip->dev);
    return addr;
  }
  bn -= NDIRECT;

  if(bn < NINDIRECT){
    // Load indirect block, allocating if necessary.
    if((addr = ip->addrs[NDIRECT]) == 0)
      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
    bp = bread(ip->dev, addr);
    a = (uint*)bp->data;
    if((addr = a[bn]) == 0){
      a[bn] = addr = balloc(ip->dev);
      log_write(bp);
    }
    brelse(bp);
    return addr;
  }
bn -= NDIRECT;
 if(bn < NINDIRECT){
 if((addr = ip->addrs[NDIRECT+1]) == 0)
      ip->addrs[NDIRECT+1] = addr = balloc(ip->dev);
    bp = bread(ip->dev, addr);
    a = (uint*)bp->data;
if((addr = a[bn/NDIRECT]) == 0){
      a[bn/NDIRECT] = addr = balloc(ip->dev);
      log_write(bp);
    }
bnp = bread(ip->dev, addr);
    b = (uint*)bnp->data;
if((addr = b[bn%NDIRECT]) == 0){
      b[bn%NDIRECT] = addr = balloc(ip->dev);
      log_write(bnp);
    }
    brelse(bnp);
    brelse(bp);
    return addr;
  }

  panic("bmap: out of range");
}
